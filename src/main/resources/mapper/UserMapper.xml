<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaoxin.manager.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.xiaoxin.manager.pojo.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="insert_uid" property="insertUid" jdbcType="INTEGER" />
    <result column="insert_time" property="insertTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="is_del" property="isDel" jdbcType="BIT" />
    <result column="is_job" property="isJob" jdbcType="BIT" />
    <result column="mcode" property="mcode" jdbcType="VARCHAR" />
    <result column="send_time" property="sendTime" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xiaoxin.manager.pojo.User" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (username, mobile, email, 
      `password`, insert_uid, insert_time, 
      update_time, is_del, is_job, 
      mcode, send_time, version
      )
    values (#{username,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{insertUid,jdbcType=INTEGER}, #{insertTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{isDel,jdbcType=BIT}, #{isJob,jdbcType=BIT}, 
      #{mcode,jdbcType=VARCHAR}, #{sendTime,jdbcType=TIMESTAMP}, 0
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.xiaoxin.manager.pojo.User" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    set username = #{username,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      insert_uid = #{insertUid,jdbcType=INTEGER},
      insert_time = #{insertTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_del = #{isDel,jdbcType=BIT},
      is_job = #{isJob,jdbcType=BIT},
      mcode = #{mcode,jdbcType=VARCHAR},
      send_time = #{sendTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="com.xiaoxin.manager.pojo.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null and password !=''">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="insertUid != null">
        insert_uid = #{insertUid,jdbcType=INTEGER},
      </if>
      <if test="insertTime != null">
        insert_time = #{insertTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=BIT},
      </if>
      <if test="isJob != null">
        is_job = #{isJob,jdbcType=BIT},
      </if>
      <if test="mcode != null">
        mcode = #{mcode,jdbcType=VARCHAR},
      </if>
      <if test="sendTime != null">
        send_time = #{sendTime,jdbcType=TIMESTAMP},
      </if>
      version = version+1
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, username, mobile, email, `password`, insert_uid, insert_time, update_time, 
    is_del, is_job, mcode, send_time, version
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, username, mobile, email, `password`, insert_uid, insert_time, update_time, 
    is_del, is_job, mcode, send_time, version
    from user
  </select>

  <!--=Start findUserByUsername 根据用户名获取用户数据 -->
  <select id="findUserByUsername" resultMap="BaseResultMap">
    select
    id, username,
    mobile,password,email, insert_uid insertUid, insert_time
    insertTime,
    update_time updateTime, is_del isDel,is_job
    isJob,mcode,send_time
    sendTime,version
    from user
    WHERE username=#{username} and is_del=0
  </select>
  <!--=End findUserByUsername 根据用户名查找用户 -->

  <!--=Start getUsers 分页查询用户列表userSearch -->
  <select id="getUsers" resultType="com.xiaoxin.manager.entity.UserRoleDTO">
    select
    id, username, mobile, email, insert_uid, insert_time,
    update_time,
    is_del as isDel,is_job as isJob,version
    from user
    <where>
      <if test="userSearch.umobile!=null and userSearch.umobile!=''">
        AND mobile =#{userSearch.umobile}
      </if>
      <if test="userSearch.uname!=null and userSearch.uname!=''">
        AND username like CONCAT(CONCAT('%',#{userSearch.uname}),
        '%')
      </if>
      <if
              test="userSearch.insertTimeStart!=null and userSearch.insertTimeStart!=''">
        AND insert_time &gt;= #{userSearch.insertTimeStart}
      </if>
      <if test="userSearch.insertTimeEnd!=null and userSearch.insertTimeEnd!=''">
        AND insert_time &lt;= #{userSearch.insertTimeEnd}
      </if>
    </where>
    ORDER BY insert_time DESC
  </select>
  <!--=End getUsers 分页查询用户列表 -->

  <!--=Start getUserAndRoles 查询用户及他对应的角色ids -->
  <resultMap id="getUserRoles" type="com.xiaoxin.manager.entity.UserRolesVO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="insert_uid" jdbcType="INTEGER" property="insertUid" />
    <result column="insert_time" jdbcType="TIMESTAMP" property="insertTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_del" jdbcType="BIT" property="isDel" />
    <result column="is_job" jdbcType="BIT" property="isJob" />
    <result column="version" jdbcType="INTEGER" property="version" />

    <collection property="userRoles" ofType="com.xiaoxin.manager.pojo.UserRoleKey">
      <result column="user_id" property="userId" />
      <result column="role_id" property="roleId" />
    </collection>

  </resultMap>
  <select id="getUserAndRoles" resultMap="getUserRoles">
    select
    u.id, u.username,
    u.mobile, u.email, u.insert_uid insertUid,u.insert_time
    insertTime,
    u.update_time updateTime, u.is_del isDel,u.is_job isJob,u.version,
    ur.user_id,ur.role_id
    from user u
    LEFT JOIN user_role ur ON
    u.id=ur.user_id
    WHERE u.id=#{id} AND u.is_del=0 and u.is_job=0
  </select>
  <!--=End getUserAndRoles 查询用户及他对应的角色ids -->

  <!--=Start findUserByMobile 根据手机号获取用户数据 -->
  <select id="findUserByMobile" resultType="com.xiaoxin.manager.pojo.User">
    select
    id, username,
    mobile,password, email, insert_uid insertUid, insert_time
    insertTime,
    update_time, is_del,is_job,mcode,send_time sendTime,version
    from user
    WHERE
    mobile=#{mobile} and is_del=0
  </select>
  <!--=End findUserByMobile 根据手机号查找用户 -->

  <!--=Start setJobUser 设置用户是否离职 -->
  <update id="setJobUser">
    update user
    set
    is_job = #{isJob,jdbcType=INTEGER},
    insert_uid = #{insertUid,jdbcType=INTEGER},
    update_time=NOW(),
    version=version+1
    where id =
    #{id,jdbcType=INTEGER} AND is_del=0
  </update>
  <!--=Start setJobUser 设置用户是否离职 -->

  <!--=Start setDelUser 删除用户 -->
  <update id="setDelUser">
    update user
    set
    is_del = #{isDel,jdbcType=INTEGER},
    insert_uid = #{insertUid,jdbcType=INTEGER},
    update_time=NOW(),
    version=version + 1
    where id =
    #{id,jdbcType=INTEGER}
  </update>
  <!--=Start setDelUser 删除用户 -->
</mapper>